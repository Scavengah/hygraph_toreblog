{"version":3,"file":"rich-text-react-renderer.cjs.production.min.js","sources":["../src/defaultElements.tsx","../src/elements/Link.tsx","../src/elements/Class.tsx","../src/elements/Video.tsx","../src/elements/Image.tsx","../src/elements/IFrame.tsx","../src/RenderText.tsx","../src/RichText.tsx"],"sourcesContent":["import React from 'react';\nimport { NodeRendererType } from '@graphcms/rich-text-types';\n\nimport { IFrame, Image, Video, Class, Link } from './elements';\n\nexport const defaultElements: Required<NodeRendererType> = {\n  a: Link,\n  class: Class,\n  video: Video,\n  img: Image,\n  iframe: IFrame,\n  blockquote: ({ children }) => <blockquote>{children}</blockquote>,\n  ul: ({ children }) => <ul>{children}</ul>,\n  ol: ({ children }) => <ol>{children}</ol>,\n  li: ({ children }) => <li>{children}</li>,\n  p: ({ children }) => <p>{children}</p>,\n  h1: ({ children }) => <h1>{children}</h1>,\n  h2: ({ children }) => <h2>{children}</h2>,\n  h3: ({ children }) => <h3>{children}</h3>,\n  h4: ({ children }) => <h4>{children}</h4>,\n  h5: ({ children }) => <h5>{children}</h5>,\n  h6: ({ children }) => <h6>{children}</h6>,\n  table: ({ children }) => <table>{children}</table>,\n  table_head: ({ children }) => <thead>{children}</thead>,\n  table_body: ({ children }) => <tbody>{children}</tbody>,\n  table_row: ({ children }) => <tr>{children}</tr>,\n  table_cell: ({ children }) => <td>{children}</td>,\n  bold: ({ children }) => <b>{children}</b>,\n  italic: ({ children }) => <i>{children}</i>,\n  underline: ({ children }) => <u>{children}</u>,\n  code: ({ children }) => <code>{children}</code>,\n  list_item_child: ({ children }) => <>{children}</>,\n};\n\nexport const elementKeys: { [key: string]: string } = {\n  'heading-one': 'h1',\n  'heading-two': 'h2',\n  'heading-three': 'h3',\n  'heading-four': 'h4',\n  'heading-five': 'h5',\n  'heading-six': 'h6',\n  class: 'class',\n  link: 'a',\n  image: 'img',\n  iframe: 'iframe',\n  video: 'video',\n  'bulleted-list': 'ul',\n  'numbered-list': 'ol',\n  'list-item': 'li',\n  'list-item-child': 'list_item_child',\n  table: 'table',\n  table_head: 'table_head',\n  table_body: 'table_body',\n  table_row: 'table_row',\n  table_cell: 'table_cell',\n  'block-quote': 'blockquote',\n  paragraph: 'p',\n  bold: 'bold',\n  italic: 'italic',\n  underline: 'underline',\n  code: 'code',\n};\n","import React from 'react';\nimport escapeHtml from 'escape-html';\nimport { LinkElement, LinkRendererProps } from '@graphcms/rich-text-types';\n\nexport function Link({ children, ...rest }: LinkRendererProps) {\n  const { href, rel, id, title, openInNewTab, className } = rest;\n\n  const props: Pick<LinkElement, 'rel' | 'id' | 'title' | 'className'> & {\n    target?: string;\n  } = {};\n\n  if (rel) props.rel = rel;\n  if (id) props.id = id;\n  if (title) props.title = title;\n  if (className) props.className = className;\n  if (openInNewTab) props.target = '_blank';\n\n  return (\n    <a href={escapeHtml(href)} {...props}>\n      {children}\n    </a>\n  );\n}\n","import React from 'react';\nimport { ClassRendererProps } from '@graphcms/rich-text-types';\n\nexport function Class({ className, children }: ClassRendererProps) {\n  return <div className={className}>{children}</div>;\n}\n","import React from 'react';\nimport escapeHtml from 'escape-html';\nimport { VideoProps } from '@graphcms/rich-text-types';\n\nexport function Video({ src, width, height, title }: Partial<VideoProps>) {\n  return (\n    <video\n      src={escapeHtml(src)}\n      controls\n      width={width || '100%'}\n      height={height || '100%'}\n      title={title}\n    >\n      <p>\n        Your browser doesn't support HTML5 video. Here is a{' '}\n        <a href={src}>link to the video</a> instead.\n      </p>\n    </video>\n  );\n}\n","import React from 'react';\nimport escapeHtml from 'escape-html';\nimport { ImageProps } from '@graphcms/rich-text-types';\n\nexport function Image({\n  src,\n  width,\n  height,\n  altText,\n  title,\n}: Partial<ImageProps>) {\n  return (\n    <img\n      loading=\"lazy\"\n      src={escapeHtml(src)}\n      width={width}\n      height={height}\n      alt={altText}\n      title={title}\n    />\n  );\n}\n","import React from 'react';\nimport escapeHtml from 'escape-html';\nimport { IFrameProps } from '@graphcms/rich-text-types';\n\nexport function IFrame({ url }: Partial<IFrameProps>) {\n  return (\n    <div\n      style={{\n        position: 'relative',\n        overflow: 'hidden',\n        width: '100%',\n        paddingTop: '56.25%',\n      }}\n    >\n      <iframe\n        style={{\n          position: 'absolute',\n          top: 0,\n          bottom: 0,\n          right: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n        }}\n        src={escapeHtml(url)}\n        loading=\"lazy\"\n        allow=\"fullscreen\"\n        frameBorder=\"0\"\n        referrerPolicy=\"no-referrer\"\n      />\n    </div>\n  );\n}\n","import React, { ReactNode } from 'react';\nimport { NodeRendererType, Text } from '@graphcms/rich-text-types';\n\nimport { elementKeys } from './defaultElements';\n\nexport function RenderText({\n  textNode,\n  renderers,\n}: {\n  textNode: Text;\n  renderers?: NodeRendererType;\n}) {\n  const { text, bold, italic, underline, code } = textNode;\n\n  const Bold = renderers?.[elementKeys['bold'] as keyof NodeRendererType];\n  const Italic = renderers?.[elementKeys['italic'] as keyof NodeRendererType];\n  const Underline =\n    renderers?.[elementKeys['underline'] as keyof NodeRendererType];\n  const Code = renderers?.[elementKeys['code'] as keyof NodeRendererType];\n\n  let element: ReactNode = text;\n\n  if (bold && Bold) {\n    element = <Bold>{element}</Bold>;\n  }\n\n  if (italic && Italic) {\n    element = <Italic>{element}</Italic>;\n  }\n\n  if (underline && Underline) {\n    element = <Underline>{element}</Underline>;\n  }\n\n  if (code && Code) {\n    element = <Code>{element}</Code>;\n  }\n\n  return <>{element}</>;\n}\n","import React, { Fragment } from 'react';\nimport {\n  RichTextProps,\n  NodeRendererType,\n  ElementNode,\n  Node,\n  isElement,\n  isText,\n} from '@graphcms/rich-text-types';\n\nimport { defaultElements, elementKeys } from './defaultElements';\nimport { RenderText } from './RenderText';\n\nfunction RenderNode({\n  node,\n  renderers,\n}: {\n  node: Node;\n  renderers?: NodeRendererType;\n}) {\n  if (isText(node)) {\n    return <RenderText textNode={node} renderers={renderers} />;\n  }\n\n  if (isElement(node)) {\n    return <RenderElement element={node} renderers={renderers} />;\n  }\n\n  const { type } = node as ElementNode;\n\n  if (__DEV__) {\n    console.warn(\n      `[@graphcms/rich-text-react-renderer]: Unknown node type encountered: ${type}`\n    );\n  }\n\n  return <Fragment />;\n}\n\nfunction RenderElement({\n  element,\n  renderers,\n}: {\n  element: ElementNode;\n  renderers?: NodeRendererType;\n}) {\n  const { children, type, ...rest } = element;\n\n  const NodeRenderer = renderers?.[elementKeys[type] as keyof NodeRendererType];\n\n  if (NodeRenderer) {\n    return (\n      <NodeRenderer {...rest}>\n        <RichText content={children as ElementNode[]} renderers={renderers} />\n      </NodeRenderer>\n    );\n  }\n\n  return <Fragment />;\n}\n\nexport function RichText({ content, renderers: resolvers }: RichTextProps) {\n  const renderers: NodeRendererType = {\n    ...defaultElements,\n    ...resolvers,\n  };\n\n  if (__DEV__ && !content) {\n    console.error(`[@graphcms/rich-text-react-renderer]: content is required.`);\n\n    return <Fragment />;\n  }\n\n  if (__DEV__ && !Array.isArray(content) && !content.children) {\n    console.error(\n      `[@graphcms/rich-text-react-renderer]: children is required.`\n    );\n\n    return <Fragment />;\n  }\n\n  const elements = Array.isArray(content) ? content : content.children;\n\n  return (\n    <>\n      {elements.map((node, index) => {\n        return <RenderNode node={node} renderers={renderers} key={index} />;\n      })}\n    </>\n  );\n}\n"],"names":["defaultElements","a","children","rest","href","rel","id","title","openInNewTab","className","props","target","React","escapeHtml","video","src","width","height","controls","img","altText","loading","alt","iframe","style","position","overflow","paddingTop","top","bottom","right","left","url","allow","frameBorder","referrerPolicy","blockquote","ul","ol","li","p","h1","h2","h3","h4","h5","h6","table","table_head","table_body","table_row","table_cell","bold","italic","underline","code","list_item_child","elementKeys","link","image","paragraph","RenderText","textNode","renderers","Bold","Italic","Underline","Code","element","text","RenderNode","node","isText","isElement","RenderElement","Fragment","type","NodeRenderer","RichText","content","elements","Array","isArray","map","index","key"],"mappings":"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"}